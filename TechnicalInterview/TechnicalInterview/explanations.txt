Question 1
-----------
A map called letters is a map of all the letters in alphabet as key and prime numbers as value
The hash function converts a string to a hash value by adding corresponding prime numbers
So a string with characters in any order will have same hash value
The code loops through main string s to strip sub strings of same size as string t to compare their hash values
If the hash values are same then True or else False is returned
The code checks for error situations like string having None, empty or t having more characters than s
The code returns False for all error situations

Question 2
------------
Palindrom is initialized as an empty string
Given string a the code loops through all of its sub strings to check for palindrom
Once a palindrom is found it checks if its length is greater than the stored palindrom
If yes it sets the palindrom to new palindrom
The final value of palindrom is returned


Question 3
-----------
The graph is represented as a map where keys are node values and values are list of node to distance tuple
mintree map is initialized as empty
The code loops through all keys which are nodes in the graph
For each node value that contains list of node and distance touple
it checks if the edge node is present in min tree and then it appends that to node's edge list
if not it finds the least distance and appends the corresponding tuple to node's edge list
finally mintree becomes the minimum spanning tree 

Question 4
-----------
Node class defines properties value as value of node and left and right as its children on left and right respectively
method populateTree uses recursion to populate the tree as a binary search tree with node value i from matrix T
method LCA uses recursion to calculate least common ancestor give root node and values n1 and n2

Question 5
----------
The map nodeMap holds all the nodes with key as its index srting root index as 0
The code traverses the linked list till there are no more next nodes saving each node to nodeMap
The mth node is retreived from nodeMap using key as last node index - m + 1

